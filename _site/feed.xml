<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-05-01T21:41:47+02:00</updated><id>/</id><title type="html">Notes on Software &amp;amp; Design</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">What exactly is a Domain?</title><link href="/2017/05/01/what-exactly-is-a-domain.html" rel="alternate" type="text/html" title="What exactly is a Domain?" /><published>2017-05-01T00:00:00+02:00</published><updated>2017-05-01T00:00:00+02:00</updated><id>/2017/05/01/what-exactly-is-a-domain</id><content type="html" xml:base="/2017/05/01/what-exactly-is-a-domain.html">&lt;p&gt;I’ve been lucky enough to be part of a team which is growing rapidly
and is convinced that the best way of managing the complexity of our
system is applying Domain Driven Design practices.&lt;/p&gt;

&lt;p&gt;This is the first time that the team has tried to apply DDD to
a project. This is true also for me, even though I’m one of the greatest
(and most annoying) supporters of the idea.&lt;/p&gt;

&lt;p&gt;It stroked me as peculiar that one of the confusion that has arisen in the
whole process is particularly the word: &lt;em&gt;Domain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, what exactly is a domain? In the &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;amp;qid=1493644523&amp;amp;sr=8-1&amp;amp;keywords=domain+driven+design&quot; title=&quot;Domain Driven Design&quot;&gt;Big Blue Book&lt;/a&gt; a domain is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A sphere of knowledge, influence, or activity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is, in practice, the whole activity of the business. The problem that we’re 
trying to solve with our efforts. For example, if you’re
into the selling sausages business the whole domain could be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Ordering System where users could buy the product.&lt;/li&gt;
  &lt;li&gt;Inventory system.&lt;/li&gt;
  &lt;li&gt;Priority System to know where to deliver first.&lt;/li&gt;
  &lt;li&gt;Decision support systems which track data.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, this could be represented in a Context Map:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/what-exactly-is-a-domain/1.png&quot; alt=&quot;image-title-here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, it could be also though as one of the areas of it. In the
sausage example, any system which represents a part of the whole business but
only if we work on the perspective of this problem. For the whole, these are
subdomains. They don’t represent all the processes of the organization just a
part of it.&lt;/p&gt;

&lt;p&gt;When we’re applying DDD we’re working on a Domain problem which we model with
Domain Models and we do our best in representing the rules of the business with
the code we write.&lt;/p&gt;

&lt;p&gt;In summary, a &lt;em&gt;Domain&lt;/em&gt; depends on the perspective we’re designing our system:
in the whole, the forest perspective, the domain is the whole business we’re in.
If we’re working on some subsystem, either fundamental or support for the business,
that will be our domain.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been lucky enough to be part of a team which is growing rapidly and is convinced that the best way of managing the complexity of our system is applying Domain Driven Design practices.</summary></entry></feed>